#!/usr/bin/env perl

package PwnCheck;

use v5.18.4;
use strict;
use warnings;
use feature qw(say);

use FindBin qw($Bin);
use lib "$Bin/lib";

use HIBP::V3;
use Getopt::Long;
use JSON;
use HTTP::Tiny;

our $VERSION = '0.0.1';

sub help {
    say q{
NAME

    pwncheck

DESCRIPTION

    Check for account or password pwnage.

SYNOPSIS

    pwncheck [...option] [...value]

OPTIONS

    -h, --help
    -d, --data-classes                      prints out a list of data classes
    -p, --password-status       <password>  checks if password(s) have been pwned
    -ab, --account-breaches     <account>   print a list of breaches found for the account
    -ap, --account-pastes       <account>   print a list of pastes found for the account
    -bs, --breached-site        <site>      print breach details about a specific site
    -bS, --breached-sites                   print a list of all known site breaches

};
    exit;
}

sub pwncheck {
    return shift->{'__pwncheck'} ||= do {
        return HIBP::V3->new;
    };
}

sub get_opts {
    my $self = shift;

    GetOptions(
        'h|help|?'            => sub { &help },
        'd|data-classes'      => \$self->{'data-classes'},
        'p|password=s'        => \$self->{'password-status'},
        'b|breaches=s'        => \$self->{'account-breaches'},
        'P|pastes=s'          => \$self->{'account-pastes'},
        'bs|breached-site=s'  => \$self->{'breached-site'},
        'bS|breached-sites'   => \$self->{'breached-sites'},
        'v|verbose'           => \$self->{'verbose'},
    );
}

sub new {
    my $blessed = bless {}, shift;
    $blessed->get_opts;
    return $blessed;
}

sub run {
    my $self = shift;

    $self->get_password_status if $self->{'password-status'};
    $self->get_data_classes if $self->{'data-classes'};
    $self->get_account_breaches if $self->{'account-breaches'};
    $self->get_account_pastes if $self->{'account-pastes'};
    $self->get_breached_site if $self->{'breached-site'};
    $self->get_breached_sites if $self->{'breached-sites'};
}

sub http {
    return shift->{'__http'} //= do {
        HTTP::Tiny->new;
    };
}

sub get_multi_val {
    my $self = shift;
    my $val  = shift;
    my $resp = $val;

    if ($val =~ m{^https://}) {
        my $url = $val;
        my $head = $self->http->head($val);
        my $ctype = $head->{'headers'}->{'content-type'} // 0;
        my $status = $head->{'status'};

        if ($ctype =~ m{^text/plain;} && $status == 200) {
            my $get = $self->http->get($url)->{'content'} // '';
            $get =~ s/\r//g;
            my @vals = split /\n/, $get;
            return \@vals;
        }
    }
    elsif (-f $val) {
        my @vals = ();
        open my $fh, '<', $val or die "$!\n";
        while (my $line = <$fh>) {
            chomp $line;
            push @vals, $line;
        }
        close $fh;
        return \@vals;
    }

    return $resp;
}

sub get_password_status {
    my $self = shift;
    my $pwncheck = $self->pwncheck;
    my $password = $self->get_multi_val($self->{'password-status'});
    my $status = $pwncheck->get_password_status($password);

    say encode_json $status;
}

sub get_account_breaches {
    my $self = shift;
    my $pwncheck = $self->pwncheck;
    my $account = $self->get_multi_val($self->{'account-breaches'});
    
    say $pwncheck->get_account_breaches($account);
}

sub get_account_pastes {
    my $self = shift;
    my $pwncheck = $self->pwncheck;
    my $account = $self->get_multi_val($self->{'account-pastes'});

    say $pwncheck->get_account_pastes($account);
}

sub get_data_classes {
    my $self = shift;
    my $pwncheck = $self->pwncheck;

    say $pwncheck->get_data_classes;
}

sub get_breached_sites {
    my $self = shift;
    my $filter = shift // '';
    my $pwncheck = $self->pwncheck;

    say $pwncheck->get_breached_sites;
}

sub get_breached_site {
    my $self = shift;

    say $self->pwncheck->get_breached_site(
        $self->{'breached-site'},
    );
}

1;

PwnCheck->new->run;
exit;
